[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "sparql-agent"
version = "0.1.0"
description = "An intelligent SPARQL query agent with OWL ontology support and LLM integration"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "David Steinberg", email = "david4096@example.com"},
]
keywords = [
    "sparql",
    "rdf",
    "owl",
    "ontology",
    "semantic-web",
    "llm",
    "knowledge-graph",
    "mcp",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Information Analysis",
]

dependencies = [
    "rdflib>=7.0.0",
    "SPARQLWrapper>=2.0.0",
    "anthropic>=0.25.0",
    "openai>=1.0.0",
    "click>=8.1.0",
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.27.0",
    "websockets>=12.0",
    "pydantic>=2.0.0",
    "owlready2>=0.46",
    "requests>=2.31.0",
    "jinja2>=3.1.0",
    "rdflib-jsonld>=0.6.0",
    "pronto>=2.5.0",
    "httpx>=0.27.0",
    "rich>=13.7.0",
    "prompt-toolkit>=3.0.43",
    "pygments>=2.17.0",
    "pydantic-settings>=2.11.0",
    "pyyaml>=6.0.3",
    "slowapi>=0.1.9",
    "python-multipart>=0.0.9",
    "flask>=3.0.0",
    "flask-cors>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "black>=24.0.0",
    "mypy>=1.8.0",
    "ruff>=0.2.0",
    "isort>=5.13.0",
    "types-requests>=2.31.0",
]

performance = [
    "pytest-benchmark>=4.0.0",
    "locust>=2.20.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
    "py-spy>=0.3.14",
    "matplotlib>=3.8.0",
    "pandas>=2.1.0",
    "pytest-xdist>=3.5.0",
    "aiohttp>=3.9.0",
]

[project.scripts]
sparql-agent = "sparql_agent.cli.main:cli"
sparql-agent-server = "sparql_agent.web.server:main"
sparql-agent-mcp = "sparql_agent.mcp.server:main"

[project.urls]
Homepage = "https://github.com/david4096/sparql-agent"
Documentation = "https://github.com/david4096/sparql-agent"
Repository = "https://github.com/david4096/sparql-agent"
Issues = "https://github.com/david4096/sparql-agent/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/sparql_agent"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.black]
line-length = 100
target-version = ["py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hatch
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "SPARQLWrapper.*",
    "owlready2.*",
    "pronto.*",
    "rdflib.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "-ra -q --strict-markers --cov=sparql_agent --cov-report=term-missing"
testpaths = [
    "tests",
]
markers = [
    "integration: mark test as integration test requiring real endpoints",
    "network: mark test as requiring internet connectivity",
    "slow: mark test as slow (execution time > 5 seconds)",
    "endpoint: mark test as endpoint-specific",
    "smoke: mark test as smoke test (basic connectivity)",
    "functional: mark test as functional test (complete feature)",
    "regression: mark test as regression test (known good queries)",
    "performance: mark test as performance test (response time monitoring)",
]

[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "black>=24.0.0",
    "mypy>=1.8.0",
    "ruff>=0.2.0",
    "isort>=5.13.0",
    "types-requests>=2.31.0",
    "pytest-benchmark>=4.0.0",
    "locust>=2.20.0",
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
    "py-spy>=0.3.14",
    "matplotlib>=3.8.0",
    "pandas>=2.1.0",
    "pytest-xdist>=3.5.0",
    "aiohttp>=3.9.0",
]

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
