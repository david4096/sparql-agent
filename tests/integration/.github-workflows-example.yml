# Example GitHub Actions workflow for integration tests
# Copy this to .github/workflows/integration-tests.yml to enable

name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC to catch endpoint issues
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  # Quick smoke tests run on every push
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --dev

      - name: Run smoke tests
        run: |
          cd tests/integration
          uv run pytest . -m smoke -v --tb=short --junit-xml=../../test-results/smoke.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: test-results/

  # Fast integration tests on PR
  fast-integration-tests:
    name: Fast Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: smoke-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --dev

      - name: Run fast tests
        run: |
          cd tests/integration
          uv run pytest . -m "integration and not slow" -v --tb=short \
            --junit-xml=../../test-results/fast.xml
        continue-on-error: true  # Don't fail if endpoints are down

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fast-test-results
          path: test-results/

  # Full integration tests (scheduled and manual)
  full-integration-tests:
    name: Full Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --dev

      - name: Run all integration tests
        run: |
          cd tests/integration
          uv run pytest . -m integration -v --tb=short \
            --junit-xml=../../test-results/full.xml
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-test-results
          path: test-results/

      - name: Comment on PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            // Read test results and comment on PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Integration tests completed. See artifacts for details.'
            });

  # Endpoint-specific tests (parallel)
  endpoint-tests:
    name: Test ${{ matrix.endpoint }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: smoke-tests
    strategy:
      fail-fast: false
      matrix:
        endpoint:
          - uniprot
          - rdfportal
          - ols4
          - clinvar

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --dev

      - name: Run ${{ matrix.endpoint }} tests
        run: |
          cd tests/integration
          ./run_tests.sh ${{ matrix.endpoint }}
        continue-on-error: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.endpoint }}-test-results
          path: test-results/

  # Performance monitoring
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: uv sync --dev

      - name: Run performance tests
        run: |
          cd tests/integration
          uv run pytest . -m performance -v --tb=short \
            --junit-xml=../../test-results/performance.xml
        continue-on-error: true

      - name: Upload performance results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: test-results/

  # Summary job
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [smoke-tests, fast-integration-tests]
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-test-results

      - name: Display test summary
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Smoke tests: ✓" >> $GITHUB_STEP_SUMMARY
          echo "- Fast integration tests: ✓" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "See artifacts for detailed results" >> $GITHUB_STEP_SUMMARY
