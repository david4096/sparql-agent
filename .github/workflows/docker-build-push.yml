# GitHub Actions workflow for building and pushing Docker images
name: Docker Build and Push

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: 'false'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # Build and Test
  # ============================================================================
  build-and-test:
    name: Build and Test Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    strategy:
      matrix:
        target: [runtime, development, mcp-server]
        platform: [linux/amd64, linux/arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=auto
            suffix=-${{ matrix.target }},onlatest=true
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and export to Docker
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          platforms: ${{ matrix.platform }}
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Test Docker image
        if: matrix.target == 'runtime' && matrix.platform == 'linux/amd64'
        run: |
          # Test basic container functionality
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.target }} --version || true
          echo "Container test completed"

      - name: Run Trivy security scan
        if: matrix.platform == 'linux/amd64'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-${{ matrix.target }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.target }}.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        if: matrix.platform == 'linux/amd64'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results-${{ matrix.target }}.sarif'
          category: 'trivy-${{ matrix.target }}'

      - name: Build and push multi-platform
        if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

  # ============================================================================
  # Run Tests in Container
  # ============================================================================
  test-in-container:
    name: Run Tests in Container
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: testing
          load: true
          tags: sparql-agent:test
          cache-from: type=gha

      - name: Run tests
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/htmlcov:/app/htmlcov \
            sparql-agent:test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./htmlcov/coverage.xml
          flags: unittests
          name: codecov-umbrella

  # ============================================================================
  # Docker Compose Validation
  # ============================================================================
  validate-compose:
    name: Validate Docker Compose
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate docker-compose.yml
        run: |
          docker-compose -f docker-compose.yml config

      - name: Validate docker-compose.dev.yml
        run: |
          docker-compose -f docker-compose.dev.yml config

      - name: Test compose stack startup
        run: |
          # Create .env file
          echo "ANTHROPIC_API_KEY=test" > .env
          echo "OPENAI_API_KEY=test" >> .env

          # Start services
          docker-compose up -d --build

          # Wait for services to be healthy
          sleep 30

          # Check service health
          docker-compose ps

          # Test API health endpoint
          curl -f http://localhost:8000/health || exit 1

          # Cleanup
          docker-compose down -v

  # ============================================================================
  # Image Signing (Optional - requires cosign)
  # ============================================================================
  sign-images:
    name: Sign Container Images
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign images
        run: |
          cosign sign --yes \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-runtime
          cosign sign --yes \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-mcp-server

  # ============================================================================
  # Deploy to Staging (Optional)
  # ============================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, test-in-container]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.sparql-agent.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/secret.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml

          # Wait for deployment
          kubectl rollout status deployment/sparql-agent-api -n sparql-agent --timeout=5m

      - name: Run smoke tests
        run: |
          # Wait for service to be available
          sleep 30

          # Test health endpoint
          curl -f https://staging.sparql-agent.example.com/health || exit 1

  # ============================================================================
  # Notify
  # ============================================================================
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-and-test, test-in-container, validate-compose]
    if: always()

    steps:
      - name: Notify on success
        if: ${{ needs.build-and-test.result == 'success' && needs.test-in-container.result == 'success' }}
        run: |
          echo "✅ Docker build and tests passed!"

      - name: Notify on failure
        if: ${{ needs.build-and-test.result == 'failure' || needs.test-in-container.result == 'failure' }}
        run: |
          echo "❌ Docker build or tests failed!"
          exit 1
