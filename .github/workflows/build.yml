name: Build and Publish

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'src/**'
      - 'pyproject.toml'
      - 'Dockerfile'
      - 'docker/**'
      - '.github/workflows/build.yml'
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish packages'
        required: false
        type: boolean
        default: false

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: sparql-agent
  PYTHON_VERSION: '3.11'

jobs:
  # Build Python package
  build-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for versioning

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install UV
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Cache UV packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-build-${{ hashFiles('uv.lock') }}

      - name: Install build dependencies
        run: |
          uv pip install --system build twine hatch

      - name: Get version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(python -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
            VERSION="${VERSION}.dev$(git rev-list --count HEAD)+$(git rev-parse --short HEAD)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Update version in pyproject.toml
        run: |
          python -c "import toml; data = toml.load('pyproject.toml'); data['project']['version'] = '${{ steps.version.outputs.VERSION }}'; toml.dump(data, open('pyproject.toml', 'w'))"

      - name: Build source distribution
        run: |
          python -m build --sdist

      - name: Build wheel
        run: |
          python -m build --wheel

      - name: Check distribution
        run: |
          twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-packages
          path: dist/
          retention-days: 30

      - name: Generate build metadata
        run: |
          cat > dist/build-metadata.json <<EOF
          {
            "version": "${{ steps.version.outputs.VERSION }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "actor": "${{ github.actor }}"
          }
          EOF

  # Build Docker images with multi-architecture support
  build-docker:
    name: Build Docker Image (${{ matrix.platform }})
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ matrix.platform }}-${{ hashFiles('Dockerfile', 'pyproject.toml', 'uv.lock') }}
          restore-keys: |
            buildx-${{ matrix.platform }}-

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=SPARQL Agent
            org.opencontainers.image.description=Intelligent SPARQL query agent with OWL ontology support and LLM integration
            org.opencontainers.image.vendor=SPARQL Agent Project

      - name: Build image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: false
          load: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
          outputs: type=docker,dest=/tmp/image-${{ strategy.job-index }}.tar

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ strategy.job-index }}
          path: /tmp/image-${{ strategy.job-index }}.tar
          retention-days: 7

  # Test Docker images
  test-docker:
    name: Test Docker Images
    runs-on: ubuntu-latest
    needs: build-docker
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Download Docker images
        uses: actions/download-artifact@v4
        with:
          pattern: docker-image-*
          merge-multiple: true

      - name: Load Docker image
        run: |
          docker load --input /tmp/image-0.tar

      - name: Get image name
        id: image
        run: |
          IMAGE=$(docker images --format "{{.Repository}}:{{.Tag}}" | head -n1)
          echo "IMAGE=$IMAGE" >> $GITHUB_OUTPUT

      - name: Run security scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.image.outputs.IMAGE }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Test Docker image functionality
        run: |
          # Test basic startup
          docker run --rm -d --name sparql-agent-test \
            -e SPARQL_AGENT_LOG_LEVEL=DEBUG \
            ${{ steps.image.outputs.IMAGE }} web &

          # Wait for startup
          sleep 10

          # Test health endpoint
          docker exec sparql-agent-test curl -f http://localhost:8000/health || exit 1

          # Cleanup
          docker stop sparql-agent-test

      - name: Test Docker image sizes
        run: |
          docker images ${{ steps.image.outputs.IMAGE }} --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"

  # Merge and push multi-arch images
  push-docker:
    name: Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-docker]
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))) ||
      (github.event_name == 'workflow_dispatch' && inputs.publish)
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download all Docker images
        uses: actions/download-artifact@v4
        with:
          pattern: docker-image-*

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_DOCKERHUB }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}

  # Publish Python package to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-python, test-docker]
    if: |
      startsWith(github.ref, 'refs/tags/v') ||
      (github.event_name == 'workflow_dispatch' && inputs.publish)
    timeout-minutes: 10
    environment:
      name: pypi
      url: https://pypi.org/p/sparql-agent
    permissions:
      id-token: write  # For trusted publishing
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          verify-metadata: true
          verbose: true

  # Publish to TestPyPI for testing
  publish-testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [build-python]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    timeout-minutes: 10
    environment:
      name: testpypi
      url: https://test.pypi.org/p/sparql-agent
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true
          verbose: true

  # Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-pypi, push-docker]
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 10
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREV_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            CHANGES=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            CHANGES=$(git log ${PREV_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
          fi

          echo "CHANGES<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-packages
          path: dist/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          body: |
            ## Changes

            ${{ steps.changelog.outputs.CHANGES }}

            ## Installation

            ```bash
            pip install sparql-agent==${{ github.ref_name }}
            ```

            ## Docker

            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
            ```

            ## What's Changed

            See the full changelog: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }}
          files: |
            dist/*.tar.gz
            dist/*.whl
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Build summary
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-python, build-docker, test-docker]
    if: always()
    steps:
      - name: Check build results
        run: |
          echo "Python Build: ${{ needs.build-python.result }}"
          echo "Docker Build: ${{ needs.build-docker.result }}"
          echo "Docker Test: ${{ needs.test-docker.result }}"

      - name: Fail if any builds failed
        if: |
          needs.build-python.result == 'failure' ||
          needs.build-docker.result == 'failure' ||
          needs.test-docker.result == 'failure'
        run: exit 1
