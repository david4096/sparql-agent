name: Deploy

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      cloud_provider:
        description: 'Cloud provider'
        required: true
        type: choice
        options:
          - aws
          - gcp
          - azure
          - all

env:
  DOCKER_IMAGE: ghcr.io/${{ github.repository }}
  HEALTH_CHECK_RETRIES: 5
  HEALTH_CHECK_INTERVAL: 30

jobs:
  # Determine deployment targets
  prepare-deployment:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.config.outputs.environment }}
      version: ${{ steps.config.outputs.version }}
      deploy_aws: ${{ steps.config.outputs.deploy_aws }}
      deploy_gcp: ${{ steps.config.outputs.deploy_gcp }}
      deploy_azure: ${{ steps.config.outputs.deploy_azure }}
    steps:
      - uses: actions/checkout@v4

      - name: Determine deployment configuration
        id: config
        run: |
          # Determine environment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ inputs.environment }}"
          elif [[ "$GITHUB_REF" == "refs/tags/v"* ]]; then
            ENV="production"
          elif [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            ENV="staging"
          elif [[ "$GITHUB_REF" == "refs/heads/develop" ]]; then
            ENV="development"
          else
            ENV="development"
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT

          # Determine version
          if [[ "$GITHUB_REF" == "refs/tags/v"* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="${GITHUB_SHA::8}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Determine cloud providers
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            PROVIDER="${{ inputs.cloud_provider }}"
          else
            PROVIDER="all"
          fi

          if [[ "$PROVIDER" == "all" ]] || [[ "$PROVIDER" == "aws" ]]; then
            echo "deploy_aws=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_aws=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$PROVIDER" == "all" ]] || [[ "$PROVIDER" == "gcp" ]]; then
            echo "deploy_gcp=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_gcp=false" >> $GITHUB_OUTPUT
          fi

          if [[ "$PROVIDER" == "all" ]] || [[ "$PROVIDER" == "azure" ]]; then
            echo "deploy_azure=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_azure=false" >> $GITHUB_OUTPUT
          fi

  # Deploy to AWS
  deploy-aws:
    name: Deploy to AWS (${{ needs.prepare-deployment.outputs.environment }})
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: needs.prepare-deployment.outputs.deploy_aws == 'true'
    timeout-minutes: 30
    environment:
      name: aws-${{ needs.prepare-deployment.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-Deploy

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy to AWS ECS
        id: deploy
        run: |
          ./scripts/deploy.sh aws \
            --environment ${{ needs.prepare-deployment.outputs.environment }} \
            --version ${{ needs.prepare-deployment.outputs.version }} \
            --image ${{ env.DOCKER_IMAGE }}:${{ needs.prepare-deployment.outputs.version }}

      - name: Run health checks
        run: |
          ./scripts/health-check.sh \
            --url ${{ steps.deploy.outputs.url }} \
            --retries ${{ env.HEALTH_CHECK_RETRIES }} \
            --interval ${{ env.HEALTH_CHECK_INTERVAL }}

      - name: Create deployment backup
        if: needs.prepare-deployment.outputs.environment == 'production'
        run: |
          ./scripts/backup.sh \
            --environment production \
            --provider aws

      - name: Send deployment notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          ./scripts/notify-deployment.sh \
            --provider aws \
            --environment ${{ needs.prepare-deployment.outputs.environment }} \
            --version ${{ needs.prepare-deployment.outputs.version }} \
            --status $STATUS

  # Deploy to GCP
  deploy-gcp:
    name: Deploy to GCP (${{ needs.prepare-deployment.outputs.environment }})
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: needs.prepare-deployment.outputs.deploy_gcp == 'true'
    timeout-minutes: 30
    environment:
      name: gcp-${{ needs.prepare-deployment.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v3

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker

      - name: Deploy to Google Cloud Run
        id: deploy
        run: |
          ./scripts/deploy.sh gcp \
            --environment ${{ needs.prepare-deployment.outputs.environment }} \
            --version ${{ needs.prepare-deployment.outputs.version }} \
            --image ${{ env.DOCKER_IMAGE }}:${{ needs.prepare-deployment.outputs.version }}

      - name: Run health checks
        run: |
          ./scripts/health-check.sh \
            --url ${{ steps.deploy.outputs.url }} \
            --retries ${{ env.HEALTH_CHECK_RETRIES }} \
            --interval ${{ env.HEALTH_CHECK_INTERVAL }}

      - name: Create deployment backup
        if: needs.prepare-deployment.outputs.environment == 'production'
        run: |
          ./scripts/backup.sh \
            --environment production \
            --provider gcp

      - name: Send deployment notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          ./scripts/notify-deployment.sh \
            --provider gcp \
            --environment ${{ needs.prepare-deployment.outputs.environment }} \
            --version ${{ needs.prepare-deployment.outputs.version }} \
            --status $STATUS

  # Deploy to Azure
  deploy-azure:
    name: Deploy to Azure (${{ needs.prepare-deployment.outputs.environment }})
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: needs.prepare-deployment.outputs.deploy_azure == 'true'
    timeout-minutes: 30
    environment:
      name: azure-${{ needs.prepare-deployment.outputs.environment }}
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ secrets.AZURE_REGISTRY_NAME }}

      - name: Deploy to Azure Container Instances
        id: deploy
        run: |
          ./scripts/deploy.sh azure \
            --environment ${{ needs.prepare-deployment.outputs.environment }} \
            --version ${{ needs.prepare-deployment.outputs.version }} \
            --image ${{ env.DOCKER_IMAGE }}:${{ needs.prepare-deployment.outputs.version }}

      - name: Run health checks
        run: |
          ./scripts/health-check.sh \
            --url ${{ steps.deploy.outputs.url }} \
            --retries ${{ env.HEALTH_CHECK_RETRIES }} \
            --interval ${{ env.HEALTH_CHECK_INTERVAL }}

      - name: Create deployment backup
        if: needs.prepare-deployment.outputs.environment == 'production'
        run: |
          ./scripts/backup.sh \
            --environment production \
            --provider azure

      - name: Send deployment notification
        if: always()
        run: |
          STATUS="${{ job.status }}"
          ./scripts/notify-deployment.sh \
            --provider azure \
            --environment ${{ needs.prepare-deployment.outputs.environment }} \
            --version ${{ needs.prepare-deployment.outputs.version }} \
            --status $STATUS

  # Deploy to Kubernetes
  deploy-kubernetes:
    name: Deploy to Kubernetes
    runs-on: ubuntu-latest
    needs: prepare-deployment
    if: needs.prepare-deployment.outputs.environment != 'development'
    timeout-minutes: 30
    environment:
      name: k8s-${{ needs.prepare-deployment.outputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config

      - name: Deploy to Kubernetes
        run: |
          # Update image in deployment
          kubectl set image deployment/sparql-agent \
            sparql-agent=${{ env.DOCKER_IMAGE }}:${{ needs.prepare-deployment.outputs.version }} \
            -n ${{ needs.prepare-deployment.outputs.environment }}

          # Wait for rollout
          kubectl rollout status deployment/sparql-agent \
            -n ${{ needs.prepare-deployment.outputs.environment }} \
            --timeout=10m

      - name: Run smoke tests
        run: |
          SERVICE_URL=$(kubectl get service sparql-agent \
            -n ${{ needs.prepare-deployment.outputs.environment }} \
            -o jsonpath='{.status.loadBalancer.ingress[0].ip}')

          ./scripts/health-check.sh \
            --url "http://${SERVICE_URL}:8000" \
            --retries 10 \
            --interval 15

  # Database migrations
  run-migrations:
    name: Run Database Migrations
    runs-on: ubuntu-latest
    needs: [prepare-deployment, deploy-aws, deploy-gcp, deploy-azure]
    if: |
      always() &&
      needs.prepare-deployment.result == 'success' &&
      (needs.deploy-aws.result == 'success' || needs.deploy-gcp.result == 'success' || needs.deploy-azure.result == 'success')
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Run migrations
        run: |
          ./scripts/migrate.sh \
            --environment ${{ needs.prepare-deployment.outputs.environment }}

  # Post-deployment tests
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [prepare-deployment, deploy-aws, deploy-gcp, deploy-azure, run-migrations]
    if: always() && needs.prepare-deployment.result == 'success'
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          pip install pytest requests

      - name: Run smoke tests
        run: |
          pytest tests/smoke/ -v \
            --environment ${{ needs.prepare-deployment.outputs.environment }}

      - name: Run integration tests
        if: needs.prepare-deployment.outputs.environment != 'production'
        run: |
          pytest tests/integration/ -v \
            --environment ${{ needs.prepare-deployment.outputs.environment }}

  # Deployment verification
  verify-deployment:
    name: Verify Deployment
    runs-on: ubuntu-latest
    needs: [prepare-deployment, post-deployment-tests]
    if: always()
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Verify deployment status
        run: |
          ./scripts/verify-deployment.sh \
            --environment ${{ needs.prepare-deployment.outputs.environment }} \
            --version ${{ needs.prepare-deployment.outputs.version }}

      - name: Update deployment status
        run: |
          ./scripts/update-deployment-status.sh \
            --environment ${{ needs.prepare-deployment.outputs.environment }} \
            --version ${{ needs.prepare-deployment.outputs.version }} \
            --status ${{ job.status }}

  # Rollback on failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [prepare-deployment, verify-deployment]
    if: |
      failure() &&
      needs.prepare-deployment.outputs.environment == 'production'
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Execute rollback
        run: |
          ./scripts/rollback.sh \
            --environment ${{ needs.prepare-deployment.outputs.environment }}

      - name: Verify rollback
        run: |
          ./scripts/verify-deployment.sh \
            --environment ${{ needs.prepare-deployment.outputs.environment }}

      - name: Send rollback notification
        run: |
          ./scripts/notify-deployment.sh \
            --environment ${{ needs.prepare-deployment.outputs.environment }} \
            --status "ROLLED_BACK" \
            --reason "Deployment verification failed"

  # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs:
      - prepare-deployment
      - deploy-aws
      - deploy-gcp
      - deploy-azure
      - deploy-kubernetes
      - post-deployment-tests
      - verify-deployment
    if: always()
    steps:
      - name: Generate deployment report
        run: |
          cat << EOF > deployment-summary.md
          # Deployment Summary

          **Environment:** ${{ needs.prepare-deployment.outputs.environment }}
          **Version:** ${{ needs.prepare-deployment.outputs.version }}
          **Triggered by:** ${{ github.actor }}
          **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

          ## Deployment Results

          - AWS: ${{ needs.deploy-aws.result }}
          - GCP: ${{ needs.deploy-gcp.result }}
          - Azure: ${{ needs.deploy-azure.result }}
          - Kubernetes: ${{ needs.deploy-kubernetes.result }}

          ## Verification

          - Post-deployment tests: ${{ needs.post-deployment-tests.result }}
          - Deployment verification: ${{ needs.verify-deployment.result }}

          ## Links

          - [Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - [Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          EOF

          cat deployment-summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('deployment-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Fail if any deployment failed
        if: |
          needs.deploy-aws.result == 'failure' ||
          needs.deploy-gcp.result == 'failure' ||
          needs.deploy-azure.result == 'failure' ||
          needs.verify-deployment.result == 'failure'
        run: exit 1
