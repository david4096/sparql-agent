# Deployment for SPARQL Agent API
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sparql-agent-api
  namespace: sparql-agent
  labels:
    app: sparql-agent
    component: api
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: sparql-agent
      component: api
  template:
    metadata:
      labels:
        app: sparql-agent
        component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: sparql-agent
      containers:
        - name: api
          image: sparql-agent:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          env:
            - name: SPARQL_AGENT_MODE
              value: "web"
          envFrom:
            - configMapRef:
                name: sparql-agent-config
            - secretRef:
                name: sparql-agent-secrets
          resources:
            requests:
              cpu: 250m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 2Gi
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          volumeMounts:
            - name: cache
              mountPath: /app/.cache
            - name: logs
              mountPath: /app/logs
      volumes:
        - name: cache
          emptyDir:
            sizeLimit: 1Gi
        - name: logs
          emptyDir:
            sizeLimit: 500Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - sparql-agent
                    - key: component
                      operator: In
                      values:
                        - api
                topologyKey: kubernetes.io/hostname

---
# Deployment for SPARQL Agent MCP Server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sparql-agent-mcp
  namespace: sparql-agent
  labels:
    app: sparql-agent
    component: mcp
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: sparql-agent
      component: mcp
  template:
    metadata:
      labels:
        app: sparql-agent
        component: mcp
    spec:
      serviceAccountName: sparql-agent
      containers:
        - name: mcp
          image: sparql-agent:mcp-latest
          imagePullPolicy: Always
          ports:
            - name: mcp
              containerPort: 3000
              protocol: TCP
          env:
            - name: SPARQL_AGENT_MODE
              value: "mcp"
            - name: SPARQL_AGENT_PORT
              value: "3000"
          envFrom:
            - configMapRef:
                name: sparql-agent-config
            - secretRef:
                name: sparql-agent-secrets
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 500m
              memory: 1Gi
          livenessProbe:
            tcpSocket:
              port: mcp
            initialDelaySeconds: 15
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: mcp
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: cache
              mountPath: /app/.cache
      volumes:
        - name: cache
          emptyDir:
            sizeLimit: 500Mi

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: sparql-agent
  labels:
    app: sparql-agent
    component: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sparql-agent
      component: redis
  template:
    metadata:
      labels:
        app: sparql-agent
        component: redis
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          args:
            - redis-server
            - --maxmemory
            - 256mb
            - --maxmemory-policy
            - allkeys-lru
            - --save
            - "60 1000"
            - --appendonly
            - "yes"
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: redis-data
              mountPath: /data
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-pvc
