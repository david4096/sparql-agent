SPARQL Agent Configuration System - Directory Structure
========================================================

/Users/david/git/sparql-agent/src/sparql_agent/config/
│
├── Core Configuration Files
│   ├── settings.py (363 lines, 10.4 KB)
│   │   └── Pydantic settings classes with environment variable support
│   │       ├── SPARQLAgentSettings (main configuration class)
│   │       ├── OntologySettings (EBI OLS4 and cache configuration)
│   │       ├── EndpointSettings (SPARQL endpoint settings)
│   │       ├── LLMSettings (LLM integration configuration)
│   │       └── LoggingSettings (logging configuration)
│   │
│   └── __init__.py (291 lines, 8.3 KB)
│       └── Module exports and utility functions
│           ├── get_settings() - Get global settings instance
│           ├── reset_settings() - Reset settings
│           ├── validate_configuration() - Validate config
│           ├── print_configuration() - Display config
│           └── export_configuration() - Export as JSON/YAML
│
├── YAML Configuration Files
│   ├── endpoints.yaml (243 lines, 7.3 KB)
│   │   └── SPARQL endpoint configurations
│   │       ├── UniProt (protein data)
│   │       ├── ClinVar (genetic variants)
│   │       ├── RDFPortal (multi-domain RDF)
│   │       ├── Wikidata (knowledge base)
│   │       ├── EBI RDF Platform (biomedical data)
│   │       ├── DBpedia (Wikipedia-derived data)
│   │       └── Endpoint groups & fallback chains
│   │
│   ├── ontologies.yaml (333 lines, 9.8 KB)
│   │   └── EBI OLS4 ontology configurations
│   │       ├── OLS4 API configuration
│   │       ├── Ontology definitions (10 total)
│   │       │   ├── EFO (Experimental Factor)
│   │       │   ├── MONDO (Disease)
│   │       │   ├── HP (Human Phenotype)
│   │       │   ├── UBERON (Anatomy)
│   │       │   ├── GO (Gene Ontology)
│   │       │   ├── ChEBI (Chemicals)
│   │       │   ├── PR (Proteins)
│   │       │   ├── SO (Sequences)
│   │       │   ├── CL (Cells)
│   │       │   └── NCBITaxon (Taxonomy)
│   │       ├── Relationship mappings
│   │       ├── Search configuration
│   │       ├── Annotation properties
│   │       └── Cache settings
│   │
│   ├── prompts.yaml (438 lines, 12.6 KB)
│   │   └── LLM prompt templates (14 total)
│   │       ├── nl_to_sparql (NL to SPARQL conversion)
│   │       ├── query_refinement (refine queries)
│   │       ├── result_interpretation (interpret results)
│   │       ├── ontology_suggestion (suggest terms)
│   │       ├── query_optimization (optimize queries)
│   │       ├── error_analysis (analyze errors)
│   │       ├── federated_query (federated planning)
│   │       ├── entity_linking (link entities)
│   │       ├── query_explanation (explain queries)
│   │       ├── schema_discovery (discover schema)
│   │       ├── data_quality (assess quality)
│   │       ├── answer_synthesis (synthesize answers)
│   │       ├── clarification (ask questions)
│   │       └── batch_query (multiple queries)
│   │
│   └── logging.yaml (286 lines, 6.8 KB)
│       └── Python logging configuration (dictConfig)
│           ├── Formatters (5 types)
│           │   ├── standard
│           │   ├── detailed
│           │   ├── json
│           │   ├── simple
│           │   └── colored
│           ├── Handlers (8 types)
│           │   ├── console
│           │   ├── file
│           │   ├── error_file
│           │   ├── json_file
│           │   ├── query_file
│           │   ├── performance_file
│           │   ├── syslog
│           │   └── null
│           └── Loggers (9 configured)
│               ├── sparql_agent
│               ├── sparql_agent.query
│               ├── sparql_agent.ontology
│               ├── sparql_agent.llm
│               ├── sparql_agent.config
│               ├── sparql_agent.performance
│               ├── sparql_agent.errors
│               ├── sparql_agent.http
│               └── sparql_agent.cache
│
├── Documentation
│   ├── README.md (539 lines, 13.7 KB)
│   │   └── Comprehensive documentation
│   │       ├── Quick start guide
│   │       ├── Configuration component details
│   │       ├── Environment variable reference
│   │       ├── Advanced usage examples
│   │       ├── Best practices
│   │       ├── Troubleshooting
│   │       └── Complete API reference
│   │
│   └── IMPLEMENTATION_SUMMARY.md (500+ lines, 14.0 KB)
│       └── Implementation details and statistics
│           ├── Deliverables overview
│           ├── Component descriptions
│           ├── Statistics and metrics
│           ├── Usage examples
│           ├── Integration guidelines
│           └── Compliance checklist
│
├── Examples & Tests
│   ├── example_usage.py (268 lines, 8.2 KB)
│   │   └── Demonstration script
│   │       ├── Basic usage examples
│   │       ├── Endpoint configuration access
│   │       ├── Ontology configuration access
│   │       ├── Prompt template usage
│   │       ├── Runtime configuration updates
│   │       ├── Configuration validation
│   │       └── Configuration export
│   │
│   └── test_config.py (300 lines, 9.4 KB)
│       └── Test suite (16 test cases)
│           ├── Settings import and instantiation
│           ├── Sub-configuration validation
│           ├── YAML configuration loading
│           ├── Runtime updates
│           ├── Environment variable overrides
│           ├── Configuration validation
│           ├── Export functionality
│           └── Cache directory creation
│
└── Dependencies
    └── requirements.txt (9 lines, 535 B)
        └── Python package dependencies
            ├── pydantic>=2.0.0
            ├── pydantic-settings>=2.0.0
            ├── pyyaml>=6.0
            ├── python-json-logger>=2.0.0
            ├── colorlog>=6.0.0
            └── mypy>=1.0.0 (dev)

========================================================
STATISTICS
========================================================

Total Files:     11
Total Lines:     3,125+
Total Size:      ~128 KB

Configuration Files:  5 (settings.py + 4 YAML files)
Documentation:        2 (README.md + IMPLEMENTATION_SUMMARY.md)
Examples & Tests:     2 (example_usage.py + test_config.py)
Support Files:        2 (__init__.py + requirements.txt)

========================================================
KEY FEATURES
========================================================

✓ Pydantic Settings with Environment Variables
  - Type-safe configuration with validation
  - SPARQL_AGENT_ prefix for all variables
  - Nested settings with __ delimiter

✓ YAML Configuration Files
  - 7 SPARQL endpoints (UniProt, ClinVar, etc.)
  - 10 biomedical ontologies (EFO, MONDO, HP, etc.)
  - 14 LLM prompt templates
  - Comprehensive logging configuration

✓ Runtime Configuration Updates
  - Dynamic configuration changes
  - Configuration reload from disk
  - Validation and export functionality

✓ OWL Ontology Cache Settings
  - Configurable cache directory
  - TTL-based expiration (24h default)
  - Size limits (500MB default)
  - Automatic directory creation

✓ EBI OLS4 API Configuration
  - API base URL: https://www.ebi.ac.uk/ols4/api
  - SPARQL endpoint configuration
  - Timeout and retry settings
  - 10 pre-configured ontologies

========================================================
USAGE
========================================================

Basic Import:
  from sparql_agent.config import get_settings
  settings = get_settings()

Environment Variables:
  export SPARQL_AGENT_DEBUG=true
  export SPARQL_AGENT_ONTOLOGY__CACHE_ENABLED=false
  export SPARQL_AGENT_LLM__MODEL_NAME=gpt-4-turbo

Access Configurations:
  endpoint = settings.get_endpoint_config('uniprot')
  ontology = settings.get_ontology_config('efo')
  prompt = settings.get_prompt_template('nl_to_sparql')

Run Tests:
  python test_config.py
  pytest test_config.py -v

Run Examples:
  python example_usage.py

========================================================
STATUS: ✓ COMPLETE AND PRODUCTION-READY
========================================================
